# -*- mode: shell-script -*-

# expand non-printing character boundary markers manually
# this is a hack, but it works
function __prompt_expandnp()
{
    local input=$1
    input="${input//\\[/\001}"
    input="${input//\\]/\002}"
    echo -e "${input}"
}

function __prompt_call()
{
    for w in "$@" ; do
	[[ ${_prompt_widget_postcmd[$w]+test} ]] && \
	    ${_prompt_widget_postcmd[$w]}
    done
}

# main prompt enabler
function __prompt_assemble()
{
    local cmd ps1 input=$1
    local -a widget_list

    # parse input
    while [[ ${#input} -ne 0 ]] ; do
	if [[ "${input}" =~ ^([^{]+)\\\{ ]] ; then # normal data
	    input=${input:${#BASH_REMATCH[1]}}
	    ps1+="${BASH_REMATCH[1]}"
	elif [[ "${input}" =~ ^\\\{([a-z0-9_-]+) ]] ; then # widget reference
	    input=${input:${#BASH_REMATCH[0]}}
	    local wname=${BASH_REMATCH[1]} command=""
	    # test for widget existence
	    if [[  ${_prompt_widget_precmd[$wname]+test} \
		|| ${_prompt_widget_cmd[$wname]+test}    \
		|| ${_prompt_widget_postmd[$wname]+test} ]] ; then
		widget_list+=("$wname")
		command=${_prompt_widget_cmd[$wname]}
	    fi

	    # gobble up an optional param
	    local param=""
	    while [[ ${#input} -ne 0 ]] ; do
		[[ "${input}" =~ ^([^\\]*)\\(.) ]] || break
		param+="${BASH_REMATCH[1]}"
		input=${input:${#BASH_REMATCH[0]}}

		[[ "${BASH_REMATCH[2]}" == "}" ]] && break
		param+="\\${BASH_REMATCH[2]}"
	    done

	    if [[ ${_prompt_widget_cmd[$wname]+test} ]] ; then
		ps1+="\$(__prompt_expandnp \"\$($command '$param')\")"
	    fi
	else
	    ps1="${ps1}${input}"
	    input=""
	fi
    done

    for w in "${widget_list[@]}" ; do
	[[ ${_prompt_widget_precmd[$w]+test}  ]] && \
	    cmd+="${cmd:+; }${_prompt_widget_precmd[$w]}"
    done

    local -a postcmds
    for w in "${widget_list[@]}" ; do
	[[ ${_prompt_widget_postcmd[$w]+test} ]] && postcmds+=($w)
    done
    [[ "${#postcmds[@]}" -gt 0 ]] && \
	ps1+="\$(__prompt_call ${postcmds[@]})"

    PROMPT_COMMAND="${cmd}"
    PS1="${ps1}"
}
__prompt_assemble "${PS1}"
